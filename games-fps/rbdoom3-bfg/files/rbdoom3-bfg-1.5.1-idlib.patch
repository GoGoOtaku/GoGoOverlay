diff --git a/idlib/CMakeLists.txt b/idlib/CMakeLists.txt
index 79232ff..04f0249 100644
--- a/idlib/CMakeLists.txt
+++ b/idlib/CMakeLists.txt
@@ -32,6 +32,11 @@ set(ID_INCLUDES_ALL
 		${ID_HASHING_INCLUDES}
 		${ID_MATH_INCLUDES}
 		${ID_SYS_INCLUDES}
+		../framework/File.h
+		../framework/DeclManager.h
+		../framework/CVarSystem.h
+		../framework/CmdSystem.h
+		../sys/sys_public.h
 		)
 			
 set(ID_SOURCES_ALL
diff --git a/idlib/Dict.cpp b/idlib/Dict.cpp
index b612a35..ee8947d 100644
--- a/idlib/Dict.cpp
+++ b/idlib/Dict.cpp
@@ -132,7 +132,7 @@ void idDict::TransferKeyValues( idDict& other )
 
 	if( other.args.Num() && other.args[0].key->GetPool() != &globalKeys )
 	{
-		common->FatalError( "idDict::TransferKeyValues: can't transfer values across a DLL boundary" );
+		idLib::common->FatalError( "idDict::TransferKeyValues: can't transfer values across a DLL boundary" );
 		return;
 	}
 
@@ -975,7 +975,7 @@ bool idDict::ReadFromIniFile( idFile* f )
 CONSOLE_COMMAND( TestDictIniFile, "Tests the writing/reading of various items in a dict to/from an ini file", 0 )
 {
 	// Write to the file
-	idFile* file = fileSystem->OpenFileWrite( "idDict_ini_test.ini" );
+	idFile* file = idLib::fileSystem->OpenFileWrite( "idDict_ini_test.ini" );
 	if( file == NULL )
 	{
 		idLib::Printf( "[^1FAILED^0] Couldn't open file for writing.\n" );
@@ -997,7 +997,7 @@ CONSOLE_COMMAND( TestDictIniFile, "Tests the writing/reading of various items in
 	delete file;
 
 	// Read from the file
-	file = fileSystem->OpenFileRead( "idDict_ini_test.ini" );
+	file = idLib::fileSystem->OpenFileRead( "idDict_ini_test.ini" );
 	if( file == NULL )
 	{
 		idLib::Printf( "[^1FAILED^0] Couldn't open file for reading.\n" );
diff --git a/idlib/MapFile.cpp b/idlib/MapFile.cpp
index 2995366..47bf123 100644
--- a/idlib/MapFile.cpp
+++ b/idlib/MapFile.cpp
@@ -2145,7 +2145,7 @@ void MapPolygonMesh::ConvertFromBrush( const idMapBrush* mapBrush, int entityNum
 
 		if( !w.GetNumPoints() )
 		{
-			common->Printf( "Entity %i, Brush %i: base winding has no points\n", entityNum, primitiveNum );
+			idLib::common->Printf( "Entity %i, Brush %i: base winding has no points\n", entityNum, primitiveNum );
 			badBrush = true;
 			break;
 		}
@@ -2161,7 +2161,7 @@ void MapPolygonMesh::ConvertFromBrush( const idMapBrush* mapBrush, int entityNum
 			{
 				// no intersection
 				//badBrush = true;
-				common->Printf( "Entity %i, Brush %i: no intersection with other brush plane\n", entityNum, primitiveNum );
+				idLib::common->Printf( "Entity %i, Brush %i: no intersection with other brush plane\n", entityNum, primitiveNum );
 				//break;
 			}
 		}
@@ -2181,7 +2181,7 @@ void MapPolygonMesh::ConvertFromBrush( const idMapBrush* mapBrush, int entityNum
 
 	if( badBrush )
 	{
-		//common->Error( "" )
+		//idLib::common->Error( "" )
 		return;
 	}
 
@@ -2252,7 +2252,7 @@ void MapPolygonMesh::ConvertFromBrush( const idMapBrush* mapBrush, int entityNum
 
 			//if( dv->GetNormal().Length() < 0.9 || dv->GetNormal().Length() > 1.1 )
 			//{
-			//	common->Error( "Bad normal in TriListForSide" );
+			//	idLib::common->Error( "Bad normal in TriListForSide" );
 			//}
 		}
 	}
diff --git a/idlib/MapFile_gltf.cpp b/idlib/MapFile_gltf.cpp
index 554ca26..6f5efad 100644
--- a/idlib/MapFile_gltf.cpp
+++ b/idlib/MapFile_gltf.cpp
@@ -439,12 +439,12 @@ void ResolveLight( gltfData* data, idMapEntity* newEntity, gltfNode* node )
 	switch( gltfExt_KHR_lights_punctual::resolveType( light->type ) )
 	{
 		default:
-			common->Warning( "Unsupported Light Type" );
+			idLib::common->Warning( "Unsupported Light Type" );
 			break;
 
 		case gltfExt_KHR_lights_punctual::Directional:
 		{
-			common->Warning( "KHR_lights_punctual::Directional not implemented" );
+			idLib::common->Warning( "KHR_lights_punctual::Directional not implemented" );
 			break;
 		}
 
diff --git a/idlib/gltfParser.cpp b/idlib/gltfParser.cpp
index 4a691ab..788d6ec 100644
--- a/idlib/gltfParser.cpp
+++ b/idlib/gltfParser.cpp
@@ -250,12 +250,12 @@ gltfPropertyArray::Iterator gltfPropertyArray::begin()
 		{
 			if( !parser->ExpectTokenString( "[" ) && parser->PeekTokenString( "{" ) )
 			{
-				common->FatalError( "Malformed gltf array" );
+				idLib::common->FatalError( "Malformed gltf array" );
 			}
 		}
 		else if( !isArrayOfStructs && !parser->ExpectTokenString( "[" ) )
 		{
-			common->FatalError( "Malformed gltf array" );
+			idLib::common->FatalError( "Malformed gltf array" );
 		}
 
 		properties.AssureSizeAlloc( properties.Num() + 1, idListNewElement<gltfPropertyItem> );
@@ -416,8 +416,8 @@ bool gltfItem_uri::Convert()
 	//HVG_TODO
 	// uri cache.
 	//read data
-	int length = fileSystem->ReadFile( item->c_str(), NULL );
-	idFile* file = fileSystem->OpenFileRead( item->c_str() );
+	int length = idLib::fileSystem->ReadFile( item->c_str(), NULL );
+	idFile* file = idLib::fileSystem->OpenFileRead( item->c_str() );
 
 	//create buffer
 	gltfBuffer* buffer = data->Buffer();
@@ -429,12 +429,12 @@ bool gltfItem_uri::Convert()
 
 	if( file->Read( dest, length ) != length )
 	{
-		common->FatalError( "Could not read %s", item->c_str() );
+		idLib::common->FatalError( "Could not read %s", item->c_str() );
 	}
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Warning( "gltf Uri %s loaded into buffer[ %i ]", buffer->name.c_str(), bufferID );
+		idLib::common->Warning( "gltf Uri %s loaded into buffer[ %i ]", buffer->name.c_str(), bufferID );
 	}
 
 	//create bufferview
@@ -449,7 +449,7 @@ bool gltfItem_uri::Convert()
 		newBufferView->parent = data;
 	}
 
-	fileSystem->CloseFile( file );
+	idLib::fileSystem->CloseFile( file );
 
 	return false;
 }
@@ -466,7 +466,7 @@ void gltfItem_Extra::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", item->json.c_str() );
+		idLib::common->Printf( "%s", item->json.c_str() );
 	}
 }
 
@@ -496,7 +496,7 @@ void gltfItem_animation_sampler::parse( idToken& token )
 		animSampler.Parse( &lexer );
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 
 		gltfAnimSampler->intType = gltfAnimation_Sampler::resolveType( gltfAnimSampler->interpolation );
@@ -521,7 +521,7 @@ void gltfItem_animation_channel_target::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 
 	item->TRS = gltfAnimation_Channel_Target::resolveType( item->path );
@@ -553,7 +553,7 @@ void gltfItem_animation_channel::parse( idToken& token )
 		anim.Parse( &lexer );
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", token.c_str() );
+			idLib::common->Printf( "%s", token.c_str() );
 		}
 
 	}
@@ -591,7 +591,7 @@ void gltfItem_mesh_primitive::parse( idToken& token )
 		prim.Parse( &lexer );
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser->ExpectTokenString( "]" );
@@ -620,7 +620,7 @@ void gltfItem_mesh_primitive_attribute::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -646,12 +646,12 @@ void gltfItem_integer_array::parse( idToken& token )
 		}
 		else
 		{
-			common->FatalError( "parse error" );
+			idLib::common->FatalError( "parse error" );
 		}
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s%s", neg.c_str(), prop.item.c_str() );
+			idLib::common->Printf( "%s%s", neg.c_str(), prop.item.c_str() );
 		}
 	}
 	parser->ExpectTokenString( "]" );
@@ -678,12 +678,12 @@ void gltfItem_number_array::parse( idToken& token )
 		}
 		else
 		{
-			common->FatalError( "parse error" );
+			idLib::common->FatalError( "parse error" );
 		}
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s%s", neg.c_str(), prop.item.c_str() );
+			idLib::common->Printf( "%s%s", neg.c_str(), prop.item.c_str() );
 		}
 	}
 	parser->ExpectTokenString( "]" );
@@ -697,7 +697,7 @@ void gltfItem_vec4::parse( idToken& token )
 	numbers->parse( token );
 	if( numbers->item->Num() != 4 )
 	{
-		common->FatalError( "gltfItem_vec4 : missing arguments, expected 4, got %i", numbers->item->Num() );
+		idLib::common->FatalError( "gltfItem_vec4 : missing arguments, expected 4, got %i", numbers->item->Num() );
 	}
 
 	double* val = numbers->item->Ptr();
@@ -713,7 +713,7 @@ void gltfItem_vec3::parse( idToken& token )
 	numbers->parse( token );
 	if( numbers->item->Num() != 3 )
 	{
-		common->FatalError( "gltfItem_vec3 : missing arguments, expected 3, got %i", numbers->item->Num() );
+		idLib::common->FatalError( "gltfItem_vec3 : missing arguments, expected 3, got %i", numbers->item->Num() );
 	}
 
 	double* val = numbers->item->Ptr();
@@ -729,7 +729,7 @@ void gltfItem_vec2::parse( idToken& token )
 	numbers->parse( token );
 	if( numbers->item->Num() != 2 )
 	{
-		common->FatalError( "gltfItem_vec3 : missing arguments, expected 2, got %i", numbers->item->Num() );
+		idLib::common->FatalError( "gltfItem_vec3 : missing arguments, expected 2, got %i", numbers->item->Num() );
 	}
 
 	double* val = numbers->item->Ptr();
@@ -745,7 +745,7 @@ void gltfItem_quat::parse( idToken& token )
 	numbers->parse( token );
 	if( numbers->item->Num() != 4 )
 	{
-		common->FatalError( "gltfItem_quat : missing arguments, expectd 4, got %i", numbers->item->Num() );
+		idLib::common->FatalError( "gltfItem_quat : missing arguments, expectd 4, got %i", numbers->item->Num() );
 	}
 
 	double* val = numbers->item->Ptr();
@@ -761,7 +761,7 @@ void gltfItem_mat4::parse( idToken& token )
 	numbers->parse( token );
 	if( numbers->item->Num() != 16 )
 	{
-		common->FatalError( "gltfItem_mat4 : missing arguments, expectd 16, got %i", numbers->item->Num() );
+		idLib::common->FatalError( "gltfItem_mat4 : missing arguments, expectd 16, got %i", numbers->item->Num() );
 	}
 
 	double* val = numbers->item->Ptr();
@@ -794,7 +794,7 @@ void gltfItem_accessor_sparse::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -815,7 +815,7 @@ void gltfItem_accessor_sparse_values::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -839,7 +839,7 @@ void gltfItem_accessor_sparse_indices::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -848,7 +848,7 @@ void gltfItem_camera_orthographic::parse( idToken& token )
 	gltfPropertyArray array = gltfPropertyArray( parser );
 	for( auto& prop : array )
 	{
-		common->Printf( "%s", prop.item.c_str() );
+		idLib::common->Printf( "%s", prop.item.c_str() );
 	}
 	parser->ExpectTokenString( "]" );
 }
@@ -874,7 +874,7 @@ void gltfItem_camera_perspective::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -897,7 +897,7 @@ void gltfItem_occlusion_texture::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -920,7 +920,7 @@ void gltfItem_normal_texture::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -941,7 +941,7 @@ void gltfItem_texture_info::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -968,7 +968,7 @@ void gltfItem_pbrMetallicRoughness::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -991,7 +991,7 @@ void gltfItem_TextureInfo_KHR_texture_transform::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -1020,7 +1020,7 @@ void gltfItem_Material_KHR_materials_pbrSpecularGlossiness::parse( idToken& toke
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -1036,7 +1036,7 @@ void gltfItem_Node_KHR_lights_punctual::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -1084,7 +1084,7 @@ void gltfItem_KHR_lights_punctual::parse( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 
@@ -1103,7 +1103,7 @@ void gltfItem_node_extensions::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 
 }
@@ -1120,7 +1120,7 @@ void gltfItem_material_extensions::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -1136,7 +1136,7 @@ void gltfItem_texture_info_extensions::parse( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", token.c_str() );
+		idLib::common->Printf( "%s", token.c_str() );
 	}
 }
 
@@ -1159,7 +1159,7 @@ void GLTF_Parser::Parse_ASSET( idToken& token )
 {
 	idStr section;
 	parser.ParseBracedSection( section );
-	common->Printf( "%s\n", section.c_str() );
+	idLib::common->Printf( "%s\n", section.c_str() );
 }
 
 void GLTF_Parser::Parse_SCENE( idToken& token )
@@ -1168,7 +1168,7 @@ void GLTF_Parser::Parse_SCENE( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( " ^1 %s scene ^6 : ^8 %i", token.c_str(), currentAsset->DefaultScene() );
+		idLib::common->Printf( " ^1 %s scene ^6 : ^8 %i", token.c_str(), currentAsset->DefaultScene() );
 	}
 }
 
@@ -1195,7 +1195,7 @@ void GLTF_Parser::Parse_SCENES( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1230,7 +1230,7 @@ void GLTF_Parser::Parse_CAMERAS( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1278,7 +1278,7 @@ void GLTF_Parser::Parse_NODES( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1324,7 +1324,7 @@ void GLTF_Parser::Parse_MATERIALS( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1355,7 +1355,7 @@ void GLTF_Parser::Parse_MESHES( idToken& token )
 		mesh.Parse( &lexer );
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1387,7 +1387,7 @@ void GLTF_Parser::Parse_TEXTURES( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1428,7 +1428,7 @@ void GLTF_Parser::Parse_IMAGES( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 
 		//automate..
@@ -1478,7 +1478,7 @@ void GLTF_Parser::Parse_ACCESSORS( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1516,7 +1516,7 @@ void GLTF_Parser::Parse_BUFFERVIEWS( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1551,7 +1551,7 @@ void GLTF_Parser::Parse_SAMPLERS( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1583,7 +1583,7 @@ void GLTF_Parser::Parse_BUFFERS( idToken& token )
 		buf.Parse( &lexer );
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1615,7 +1615,7 @@ void GLTF_Parser::Parse_ANIMATIONS( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1649,7 +1649,7 @@ void GLTF_Parser::Parse_SKINS( idToken& token )
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1673,7 +1673,7 @@ void GLTF_Parser::Parse_EXTENSIONS( idToken& token )
 
 	if( gltf_parseVerbose.GetBool() )
 	{
-		common->Printf( "%s", json.c_str() );
+		idLib::common->Printf( "%s", json.c_str() );
 	}
 }
 
@@ -1686,7 +1686,7 @@ void GLTF_Parser::Parse_EXTENSIONS_USED( idToken& token )
 		ext->extension = prop.item;
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "%s", prop.item.c_str() );
+			idLib::common->Printf( "%s", prop.item.c_str() );
 		}
 	}
 	parser.ExpectTokenString( "]" );
@@ -1702,7 +1702,7 @@ void GLTF_Parser::Parse_EXTENSIONS_REQUIRED( idToken& token )
 	{
 		if( item.type != TT_STRING )
 		{
-			common->FatalError( "malformed extensions_used array" );
+			idLib::common->FatalError( "malformed extensions_used array" );
 		}
 		idStr& extension = exts.Alloc();
 		extension = item.c_str();
@@ -1715,7 +1715,7 @@ void GLTF_Parser::Parse_EXTENSIONS_REQUIRED( idToken& token )
 	parser.ExpectTokenString( "]" );
 	for( auto& out : exts )
 	{
-		common->Printf( "%s", out.c_str() );
+		idLib::common->Printf( "%s", out.c_str() );
 	}
 }
 
@@ -1740,7 +1740,7 @@ gltfProperty GLTF_Parser::ParseProp( idToken& token )
 		skipping = true;
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->DPrintf( "Searching for buffer tag. Skipping %s.", token.c_str() );
+			idLib::common->DPrintf( "Searching for buffer tag. Skipping %s.", token.c_str() );
 		}
 	}
 	else
@@ -1750,7 +1750,7 @@ gltfProperty GLTF_Parser::ParseProp( idToken& token )
 			skipping = true;
 			if( gltf_parseVerbose.GetBool() )
 			{
-				common->DPrintf( "Skipping %s , already done.", token.c_str() );
+				idLib::common->DPrintf( "Skipping %s , already done.", token.c_str() );
 			}
 		}
 	}
@@ -1815,7 +1815,7 @@ gltfProperty GLTF_Parser::ParseProp( idToken& token )
 			//Parse_BUFFERVIEWS( token );
 			if( !bufferViewsDone )
 			{
-				common->FatalError( "Bufferviews should already be parsed!" );
+				idLib::common->FatalError( "Bufferviews should already be parsed!" );
 			}
 			break;
 		case SAMPLERS:
@@ -1824,7 +1824,7 @@ gltfProperty GLTF_Parser::ParseProp( idToken& token )
 		case BUFFERS:
 			if( !buffersDone )
 			{
-				common->FatalError( "Buffers should already be parsed!" );
+				idLib::common->FatalError( "Buffers should already be parsed!" );
 			}
 			break;
 		case ANIMATIONS:
@@ -1843,7 +1843,7 @@ gltfProperty GLTF_Parser::ParseProp( idToken& token )
 			Parse_EXTENSIONS_REQUIRED( token );
 			break;
 		default:
-			common->FatalError( "UnImplemented GLTF property : %s", token.c_str() );
+			idLib::common->FatalError( "UnImplemented GLTF property : %s", token.c_str() );
 	}
 	return prop;
 }
@@ -1928,17 +1928,17 @@ gltfProperty GLTF_Parser::ResolveProp( idToken& token )
 
 bool GLTF_Parser::loadGLB( idStr filename )
 {
-	if( fileSystem->GetFileLength( filename ) <= 0 )
+	if( idLib::fileSystem->GetFileLength( filename ) <= 0 )
 	{
-		common->Warning( " %s does not exist!", filename.c_str() );
+		idLib::common->Warning( " %s does not exist!", filename.c_str() );
 		return false;
 	}
 
-	idFile* file = fileSystem->OpenFileRead( filename );
+	idFile* file = idLib::fileSystem->OpenFileRead( filename );
 
 	if( file->Length() < 20 )
 	{
-		common->FatalError( "Too short data size for glTF Binary." );
+		idLib::common->FatalError( "Too short data size for glTF Binary." );
 		return false;
 	}
 	idStr gltfMagic( "glTF" );
@@ -1948,11 +1948,11 @@ bool GLTF_Parser::loadGLB( idStr filename )
 	fileMagic[4] = 0;
 	if( gltfMagic.Icmp( ( const char* )&fileMagic ) == 0 )
 	{
-		common->Printf( "reading %s...\n", filename.c_str() );
+		idLib::common->Printf( "reading %s...\n", filename.c_str() );
 	}
 	else
 	{
-		common->Error( "invalid magic" );
+		idLib::common->Error( "invalid magic" );
 		return false;
 	}
 
@@ -1983,7 +1983,7 @@ bool GLTF_Parser::loadGLB( idStr filename )
 		int read = file->Read( ( void* )data, chunk_length );
 		if( read != chunk_length )
 		{
-			common->FatalError( "Could not read full chunk (%i bytes) in file %s", chunk_length, filename.c_str() );
+			idLib::common->FatalError( "Could not read full chunk (%i bytes) in file %s", chunk_length, filename.c_str() );
 		}
 		length -= read;
 		if( chunk_type == gltfChunk_Type_JSON )
@@ -1993,15 +1993,15 @@ bool GLTF_Parser::loadGLB( idStr filename )
 		}
 		else if( !chunkCount )
 		{
-			common->FatalError( "first chunk was not a json chunk" );
+			idLib::common->FatalError( "first chunk was not a json chunk" );
 		}
 		else
 		{
-			common->Printf( "BINCHUNK %i %i bytes\n", chunkCount, chunk_length );
+			idLib::common->Printf( "BINCHUNK %i %i bytes\n", chunkCount, chunk_length );
 		}
 		if( chunkCount++ && length )
 		{
-			common->FatalError( "corrupt glb file." );
+			idLib::common->FatalError( "corrupt glb file." );
 		}
 	}
 
@@ -2018,12 +2018,12 @@ bool GLTF_Parser::Parse()
 	{
 		if( token.type != TT_STRING )
 		{
-			common->FatalError( "Expected an \"string\" " );
+			idLib::common->FatalError( "Expected an \"string\" " );
 		}
 
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( token.c_str() );
+			idLib::common->Printf( token.c_str() );
 		}
 		gltfProperty prop = ParseProp( token );
 
@@ -2043,7 +2043,7 @@ bool GLTF_Parser::Parse()
 		}
 		if( gltf_parseVerbose.GetBool() )
 		{
-			common->Printf( "\n" );
+			idLib::common->Printf( "\n" );
 		}
 		parsing = parser.PeekTokenString( "," );
 		if( parsing )
@@ -2058,11 +2058,11 @@ bool GLTF_Parser::Parse()
 				if( !buffersDone )
 				{
 					buffersDone = true;
-					common->Printf( "no %s found", "buffers" );
+					idLib::common->Printf( "no %s found", "buffers" );
 				}
 				if( !bufferViewsDone )
 				{
-					common->Printf( "no %s found", "bufferviews" );
+					idLib::common->Printf( "no %s found", "bufferviews" );
 					bufferViewsDone = true;
 				}
 				parser.Reset();
@@ -2082,14 +2082,14 @@ bool GLTF_Parser::Parse()
 	parser.ReadToken( &token );
 	if( parser.EndOfFile() )
 	{
-		common->Printf( "%s ^2loaded\n", currentFile.c_str() );
+		idLib::common->Printf( "%s ^2loaded\n", currentFile.c_str() );
 	}
 	else
 	{
-		common->FatalError( "%s not fully loaded.", currentFile.c_str() );
+		idLib::common->FatalError( "%s not fully loaded.", currentFile.c_str() );
 	}
 #else
-	common->Printf( "%s ^2loaded\n", currentFile.c_str() );
+	idLib::common->Printf( "%s ^2loaded\n", currentFile.c_str() );
 #endif
 
 	buffersDone = false;
@@ -2110,7 +2110,7 @@ bool GLTF_Parser::Load( idStr filename )
 		return true;
 	}
 
-	common->SetRefreshOnPrint( true );
+	idLib::common->SetRefreshOnPrint( true );
 	if( filename.CheckExtension( ".glb" ) )
 	{
 		if( !loadGLB( filename ) )
@@ -2120,23 +2120,23 @@ bool GLTF_Parser::Load( idStr filename )
 	}
 	else if( filename.CheckExtension( ".gltf" ) )
 	{
-		int length = fileSystem->ReadFile( filename, NULL );
+		int length = idLib::fileSystem->ReadFile( filename, NULL );
 		if( !length )
 		{
-			common->FatalError( "Failed to read file" );
+			idLib::common->FatalError( "Failed to read file" );
 		}
 
 		data = gltfData::Data( filename , true );
 		byte* dataBuff = data->AddData( length );
 		currentAsset = data;
 
-		idFile* file = fileSystem->OpenFileRead( filename );
+		idFile* file = idLib::fileSystem->OpenFileRead( filename );
 		if( file->Read( dataBuff, length ) != length )
 		{
-			common->FatalError( "Cannot read file, %s", filename.c_str() );
+			idLib::common->FatalError( "Cannot read file, %s", filename.c_str() );
 		}
 
-		fileSystem->CloseFile( file );
+		idLib::fileSystem->CloseFile( file );
 
 		if( !parser.LoadMemory( ( const char* )dataBuff, length, "GLTF_ASCII_JSON", 0 ) )
 		{
@@ -2153,7 +2153,7 @@ bool GLTF_Parser::Load( idStr filename )
 
 	parser.Reset();
 	parser.FreeSource();
-	common->SetRefreshOnPrint( false );
+	idLib::common->SetRefreshOnPrint( false );
 
 	//fix up node hierarchy
 	auto& nodeList = currentAsset->NodeList();
@@ -2353,7 +2353,7 @@ void gltfData::ClearData( idStr& fileName )
 	}
 	else
 	{
-		common->DWarning( " tried to clear GLTF data while no data was loaded for %s", fileName.c_str() );
+		idLib::common->DWarning( " tried to clear GLTF data while no data was loaded for %s", fileName.c_str() );
 	}
 
 }
@@ -2425,4 +2425,4 @@ bool gltfManager::ExtractIdentifier( idStr& filename, int& id, idStr& name )
 	}
 
 	return false;
-}
\ No newline at end of file
+}
diff --git a/idlib/math/Simd.cpp b/idlib/math/Simd.cpp
index 3cbaf37..74aa483 100644
--- a/idlib/math/Simd.cpp
+++ b/idlib/math/Simd.cpp
@@ -1394,7 +1394,7 @@ void idSIMD::Test_f( const idCmdArgs& args )
 		{
 			if( !( cpuid & CPUID_MMX ) || !( cpuid & CPUID_SSE ) )
 			{
-				common->Printf( "CPU does not support MMX & SSE\n" );
+				idLib::common->Printf( "CPU does not support MMX & SSE\n" );
 				return;
 			}
 			p_simd = new( TAG_MATH ) idSIMD_SSE;
@@ -1402,7 +1402,7 @@ void idSIMD::Test_f( const idCmdArgs& args )
 		else
 #endif
 		{
-			common->Printf( "invalid argument, use: MMX, 3DNow, SSE, SSE2, SSE3, AltiVec\n" );
+			idLib::common->Printf( "invalid argument, use: MMX, 3DNow, SSE, SSE2, SSE3, AltiVec\n" );
 			return;
 		}
 	}
diff --git a/sys/sys_public.h b/sys/sys_public.h
index 17109b3..9a5f6aa 100644
--- a/sys/sys_public.h
+++ b/sys/sys_public.h
@@ -517,8 +517,8 @@ void			Sys_Sleep( int msec );
 
 // Sys_Milliseconds should only be used for profiling purposes,
 // any game related timing information should come from event timestamps
-int				Sys_Milliseconds();
-uint64			Sys_Microseconds();
+extern int				Sys_Milliseconds();
+extern uint64			Sys_Microseconds();
 
 // for accurate performance testing
 double			Sys_GetClockTicks();
